{
  "techs": [
    {
      "classification": "Frontend",
      "name": "React",
      "level": 3,
      "description": [
        "useState 함수를 이용해 여러 상태를 관리할 수 있음.",
        "Container Presentational 패턴을 적용해 UI로직과 비즈니스 로직을 분리하여 관리할 수 있음.",
        "중요 로직들을 custom Hook으로 분리하여 재사용 가능성을 높일 수 있음.",
        "Context를 활용하여 전역 상태 관리를 할 수 있음."
      ]
    },
    {
      "classification": "Frontend",
      "name": "TailwindCSS",
      "level": 3,
      "description": [
        "TailwindCSS v3과 v4 두 가지 버전을 모두 활용하여 테마를 지정하고, 원하는 형태로 가공할 수 있음.",
        "애니메이션 로직을 추가하고 calc 함수를 활용해 계산된 UI를 제작할 수 있음.",
        "sm과 md 등 다양한 태그를 활용하여 반응형 화면을 제작할 수 있음."
      ]
    },
    {
      "classification": "Language",
      "name": "JavaScript",
      "level": 4,
      "description": [
        "ES6+ 문법을 기반으로 let, const, arrow function, destructuring 등 다양한 최신 문법을 활용할 수 있음.",
        "비동기 처리에서는 Promise와 async/await을 사용해 비동기 흐름을 명확하게 제어할 수 있음."
      ]
    },
    {
      "classification": "Language",
      "name": "TypeScript",
      "level": 3,
      "description": [
        "여러 타입 선언을 통해 타입 안정성과 코드 가독성을 높일 수 있음.",
        "interface와 type을 활용하여 데이터 구조를 명확히 정의하고, 타입 추론 및 타입 가드를 통해 런타임 오류를 최소화할 수 있음.",
        "React와 함께 사용할 때 props와 state에 명확한 타입을 지정하여 컴포넌트의 재사용성과 유지보수성을 향상시킬 수 있음."
      ]
    },
    {
      "classification": "Frontend",
      "name": "HTML",
      "level": 3,
      "description": [
        "시멘틱 태그를 활용하여 구조화된 마크업을 작성할 수 있으며, 접근성과 SEO를 고려한 요소 배치를 설계할 수 있음."
      ]
    },
    {
      "classification": "Frontend",
      "name": "WebPack",
      "level": 3,
      "description": [
        "코드 스플리팅을 통해 캐싱 최적화 설정을 통해 성능 개선할 수 있음.",
        "기능별로 번들링을 함으로써 크롬 익스텐션 제작할 수 있음."
      ]
    },
    {
      "classification": "Language",
      "name": "Python",
      "level": 3,
      "description": [
        "기초 문법과 자료구조를 활용해 알고리즘 문제 해결이 가능하며, 리스트/딕셔너리 컴프리헨션과 람다 함수 등을 통해 로직 구현이 가능함.",
        "파일 입출력, 예외 처리, 모듈화 등을 이용해 간단한 도구나 자동화 스크립트를 작성할 수 있음.",
        "웹 크롤링, 데이터 파싱 등 간단한 데이터 처리 작업에 requests, BeautifulSoup 등을 활용한 경험이 있음."
      ]
    },
    {
      "classification": "Tools",
      "name": "Git",
      "level": 3,
      "description": [
        "git branch, merge, rebase, stash 등을 활용해 브랜치 기반의 협업이 가능하며, 충돌 상황을 해결하고 안정적으로 병합할 수 있음.",
        "git log, git diff, git blame 등을 활용하여 변경 이력 추적과 디버깅을 효율적으로 수행할 수 있음.",
        "GitHub Flow 기반으로 feature, hotfix, release 브랜치를 분리하여 작업하며, PR 리뷰 및 커밋 메시지 컨벤션을 통해 협업의 일관성을 유지함."
      ]
    },
    {
      "classification": "Tools",
      "name": "Figma",
      "level": 3,
      "description": [
        "디자인 시안을 바탕으로 정확한 마크업과 스타일을 구현할 수 있으며, 컴포넌트 단위 분해 및 재사용성을 고려한 UI 설계가 가능함.",
        "디자이너와의 협업 시 Figma의 오토 레이아웃, 컴포넌트 등을 활용해 개발 단계에서의 UI 해석 오류를 줄일 수 있음."
      ]
    }
  ]
}
